package defpackage;
/* compiled from: PG */
/* renamed from: ckgh  reason: default package */
/* loaded from: classes.dex */
public final class ckgh {
    public static final ckha A;
    public static final ckha B;
    public static final ckha C;
    public static final ckha D;
    public static final ckha E;
    public static final ckha F;
    public static final ckha G;
    public static final ckha H;
    public static final ckha I;
    public static final ckha J;
    public static final ckha K;
    public static final ckha L;
    public static final ckha M;
    public static final ckha N;
    public static final ckha O;
    public static final ckha P;
    public static final ckgz Q;
    public static final ckgz R;
    public static final ckgz S;
    public static final ckgz T;
    public static final ckgz U;
    public static final ckgz V;
    public static final ckgz W;
    public static final ckgz X;
    public static final ckgz Y;
    public static final ckgz Z;
    public static final ckgu aA;
    public static final ckgu aB;
    public static final ckhg aC;
    public static final ckha aD;
    public static final ckhg aE;
    public static final ckgz aF;
    public static final ckha aG;
    public static final ckgu aH;
    public static final ckhg aI;
    public static final ckgw aJ;
    public static final ckhf aK;
    public static final ckhg aL;
    public static final ckgz aM;
    public static final ckgz aN;
    public static final ckgz aO;
    public static final ckgz aP;
    public static final ckgz aQ;
    public static final ckgz aR;
    public static final ckgz aS;
    public static final ckgz aT;
    public static final ckgz aU;
    public static final ckgz aV;
    public static final ckgz aW;
    public static final ckgz aX;
    public static final ckgz aY;
    public static final ckgz aZ;
    public static final ckgz aa;
    public static final ckgz ab;
    public static final ckgz ac;
    public static final ckgz ad;
    public static final ckgz ae;
    public static final ckgz af;
    public static final ckgz ag;
    public static final ckgz ah;
    public static final ckgz ai;
    public static final ckgz aj;
    public static final ckgz ak;
    public static final ckgz al;
    public static final ckgz am;
    public static final ckgz an;
    public static final ckgz ao;
    public static final ckgz ap;
    public static final ckgz aq;
    public static final ckgz ar;
    public static final ckgz as;
    public static final ckgz at;
    public static final ckgz au;
    public static final ckgz av;
    public static final ckgz aw;
    public static final ckgu ax;
    public static final ckgu ay;
    public static final ckgu az;
    public static final ckgz bA;
    public static final ckha bB;
    public static final ckha bC;
    public static final ckgz bD;
    public static final ckgz bE;
    public static final ckgz bF;
    public static final ckgz bG;
    public static final ckgz bH;
    public static final ckgz bI;
    public static final ckgz ba;
    public static final ckgz bb;
    public static final ckgz bc;
    public static final ckgz bd;
    public static final ckgz be;
    public static final ckgz bf;
    public static final ckgz bg;
    public static final ckha bh;
    public static final ckgz bi;
    public static final ckha bj;
    public static final ckgz bk;
    public static final ckha bl;
    public static final ckgz bm;
    public static final ckha bn;
    public static final ckgz bo;
    public static final ckha bp;
    public static final ckgz bq;
    public static final ckgz br;
    public static final ckgz bs;
    public static final ckgz bt;
    public static final ckgz bu;
    public static final ckgz bv;
    public static final ckgz bw;
    public static final ckgz bx;
    public static final ckgz by;
    public static final ckgz bz;
    public static final ckgu h;
    public static final ckhg i;
    public static final ckha j;
    public static final ckha k;
    public static final ckha l;
    public static final ckha m;
    public static final ckha n;
    public static final ckha o;
    public static final ckha p;
    public static final ckha q;
    public static final ckha r;
    public static final ckha s;
    public static final ckha t;
    public static final ckha u;
    public static final ckha v;
    public static final ckha w;
    public static final ckha x;
    public static final ckha y;
    public static final ckha z;
    public static final ckhg a = new ckhg("FrameTime", ckgy.MAP);
    public static final ckhg b = new ckhg("UserPerceivedFrameTimeTarget30Fps", ckgy.MAP);
    public static final ckhg c = new ckhg("UserPerceivedFrameTimeTarget60Fps", ckgy.MAP);
    public static final ckha d = new ckha("FrameRateRegulatorLag", ckgy.MAP);
    public static final ckhf e = new ckhf("LabelingTimeToComplete", ckgy.MAP);
    public static final ckgw f = new ckgw("LabelsFrameTime", ckgy.MAP);
    public static final ckgw g = new ckgw("BuildingsFrameTime", ckgy.MAP);

    static {
        new ckgu("LegendFormatMismatch", ckgy.MAP);
        h = new ckgu("LegendStyleTableNotReady", ckgy.MAP);
        i = new ckhg("NetworkTileFetchingDisabledTime", ckgy.MAP);
        j = new ckha("NetworkFetchEndToEndLatencyApiTileOverlay", ckgy.MAP);
        k = new ckha("NetworkFetchEndToEndLatencyBase", ckgy.MAP);
        l = new ckha("NetworkFetchEndToEndLatencyBasemapPersonalization", ckgy.MAP);
        m = new ckha("NetworkFetchEndToEndLatencyBicyclingOverlay", ckgy.MAP);
        n = new ckha("NetworkFetchEndToEndLatencyBuilding3d", ckgy.MAP);
        o = new ckha("NetworkFetchEndToEndLatencyBusyness", ckgy.MAP);
        p = new ckha("NetworkFetchEndToEndLatencyCategoricalSearch", ckgy.MAP);
        q = new ckha("NetworkFetchEndToEndLatencyCategoricalSearchResultsInjection", ckgy.MAP);
        r = new ckha("NetworkFetchEndToEndLatencyCovid19", ckgy.MAP);
        s = new ckha("NetworkFetchEndToEndLatencyExploreEatAndDrink", ckgy.MAP);
        t = new ckha("NetworkFetchEndToEndLatencyExplorePlay", ckgy.MAP);
        u = new ckha("NetworkFetchEndToEndLatencyExploreServices", ckgy.MAP);
        v = new ckha("NetworkFetchEndToEndLatencyExploreShop", ckgy.MAP);
        w = new ckha("NetworkFetchEndToEndLatencyHighlightRap", ckgy.MAP);
        x = new ckha("NetworkFetchEndToEndLatencyIndoor", ckgy.MAP);
        y = new ckha("NetworkFetchEndToEndLatencyLabelsOnly", ckgy.MAP);
        z = new ckha("NetworkFetchEndToEndLatencyLocalRecommendations", ckgy.MAP);
        A = new ckha("NetworkFetchEndToEndLatencyMajorEvent", ckgy.MAP);
        B = new ckha("NetworkFetchEndToEndLatencyMyMapsTileOverlay", ckgy.MAP);
        C = new ckha("NetworkFetchEndToEndLatencyPersonalizedSmartmaps", ckgy.MAP);
        D = new ckha("NetworkFetchEndToEndLatencyPersonalizedSmartmapsPertile", ckgy.MAP);
        E = new ckha("NetworkFetchEndToEndLatencyRealtime", ckgy.MAP);
        F = new ckha("NetworkFetchEndToEndLatencyRoadGraph", ckgy.MAP);
        G = new ckha("NetworkFetchEndToEndLatencySatellite", ckgy.MAP);
        new ckha("NetworkFetchEndToEndLatencySpotlight", ckgy.MAP);
        H = new ckha("NetworkFetchEndToEndLatencySpotlightHighlighting", ckgy.MAP);
        I = new ckha("NetworkFetchEndToEndLatencyStreetView", ckgy.MAP);
        J = new ckha("NetworkFetchEndToEndLatencySearchResults", ckgy.MAP);
        K = new ckha("NetworkFetchEndToEndLatencyTerrain", ckgy.MAP);
        L = new ckha("NetworkFetchEndToEndLatencyTerrainDark", ckgy.MAP);
        M = new ckha("NetworkFetchEndToEndLatencyTrafficCar", ckgy.MAP);
        N = new ckha("NetworkFetchEndToEndLatencyTrafficV2", ckgy.MAP);
        O = new ckha("NetworkFetchEndToEndLatencyTransit", ckgy.MAP);
        P = new ckha("NetworkFetchEndToEndLatencyTravelHighlight", ckgy.MAP);
        Q = new ckgz("NetworkFetchStatusApiTileOverlay", ckgy.MAP);
        R = new ckgz("NetworkFetchStatusBase", ckgy.MAP);
        S = new ckgz("NetworkFetchStatusBasemapPersonalization", ckgy.MAP);
        T = new ckgz("NetworkFetchStatusBicyclingOverlay", ckgy.MAP);
        U = new ckgz("NetworkFetchStatusBuilding3d", ckgy.MAP);
        V = new ckgz("NetworkFetchStatusBusyness", ckgy.MAP);
        W = new ckgz("NetworkFetchStatusCategoricalSearch", ckgy.MAP);
        X = new ckgz("NetworkFetchStatusCategoricalSearchResultsInjection", ckgy.MAP);
        Y = new ckgz("NetworkFetchStatusCovid19", ckgy.MAP);
        Z = new ckgz("NetworkFetchStatusExploreEatAndDrink", ckgy.MAP);
        aa = new ckgz("NetworkFetchStatusExplorePlay", ckgy.MAP);
        ab = new ckgz("NetworkFetchStatusExploreServices", ckgy.MAP);
        ac = new ckgz("NetworkFetchStatusExploreShop", ckgy.MAP);
        ad = new ckgz("NetworkFetchStatusHighlightRap", ckgy.MAP);
        ae = new ckgz("NetworkFetchStatusIndoor", ckgy.MAP);
        af = new ckgz("NetworkFetchStatusLabelsOnly", ckgy.MAP);
        ag = new ckgz("NetworkFetchStatusLocalRecommendations", ckgy.MAP);
        ah = new ckgz("NetworkFetchStatusMajorEvent", ckgy.MAP);
        ai = new ckgz("NetworkFetchStatusMyMapsTileOverlay", ckgy.MAP);
        aj = new ckgz("NetworkFetchStatusPersonalizedSmartmaps", ckgy.MAP);
        ak = new ckgz("NetworkFetchStatusPersonalizedSmartmapsPertile", ckgy.MAP);
        al = new ckgz("NetworkFetchStatusRealtime", ckgy.MAP);
        am = new ckgz("NetworkFetchStatusRoadGraph", ckgy.MAP);
        an = new ckgz("NetworkFetchStatusSatellite", ckgy.MAP);
        new ckgz("NetworkFetchStatusSpotlight", ckgy.MAP);
        ao = new ckgz("NetworkFetchStatusSpotlightHighlighting", ckgy.MAP);
        ap = new ckgz("NetworkFetchStatusStreetView", ckgy.MAP);
        aq = new ckgz("NetworkFetchStatusSearchResults", ckgy.MAP);
        ar = new ckgz("NetworkFetchStatusTerrain", ckgy.MAP);
        as = new ckgz("NetworkFetchStatusTerrainDark", ckgy.MAP);
        at = new ckgz("NetworkFetchStatusTrafficCar", ckgy.MAP);
        au = new ckgz("NetworkFetchStatusTrafficV2", ckgy.MAP);
        av = new ckgz("NetworkFetchStatusTransit", ckgy.MAP);
        aw = new ckgz("NetworkFetchStatusTravelHighlight", ckgy.MAP);
        ax = new ckgu("PoiClickedEventAttemptedViewportLog", ckgy.MAP);
        ay = new ckgu("PoiClickedEventCreated", ckgy.MAP);
        az = new ckgu("PoiClickedEventViewportSent", ckgy.MAP);
        aA = new ckgu("StyleTableFetch", ckgy.MAP);
        aB = new ckgu("StyleTablesFetchedFromNetwork", ckgy.MAP);
        aC = new ckhg("StyleTableFetchFirstResponseTime", ckgy.MAP);
        aD = new ckha("StyleTableFetchIncompleteTime", ckgy.MAP);
        aE = new ckhg("StyleTableFetchLastResponseTime", ckgy.MAP);
        aF = new ckgz("StyleTableFetchStatus", ckgy.MAP);
        aG = new ckha("StyleTableNumStyleEntriesUsed", ckgy.MAP);
        new ckha("TextureAtlasTotalBytes", ckgy.MAP);
        new ckgz("TextureAtlasIconTotalCount", ckgy.MAP);
        new ckgz("TextureAtlasTextTotalCount", ckgy.MAP);
        new ckgz("TextureAtlasCalloutTotalCount", ckgy.MAP);
        new ckgz("TextureAtlasIconLiveCount", ckgy.MAP);
        new ckgz("TextureAtlasTextLiveCount", ckgy.MAP);
        new ckgz("TextureAtlasCalloutLiveCount", ckgy.MAP);
        new ckgz("TextureAtlasIconUtilization", ckgy.MAP);
        new ckgz("TextureAtlasTextUtilization", ckgy.MAP);
        new ckgz("TextureAtlasCalloutUtilization", ckgy.MAP);
        new ckgz("TextureAtlasIconRefCount", ckgy.MAP);
        new ckgz("TextureAtlasTextRefCount", ckgy.MAP);
        new ckgz("TextureAtlasCalloutRefCount", ckgy.MAP);
        new ckgz("TextureAtlasIconEntryCount", ckgy.MAP);
        new ckgz("TextureAtlasTextEntryCount", ckgy.MAP);
        new ckgz("TextureAtlasCalloutEntryCount", ckgy.MAP);
        aH = new ckgu("TileParseFailureCount", ckgy.MAP);
        aI = new ckhg("TilePrepTime", ckgy.MAP);
        aJ = new ckgw("GmmAppForegroundTime", ckgy.MAP, ckde.b);
        aK = new ckhf("ViewportMixedEpochsTime", ckgy.MAP, ckde.b);
        aL = new ckhg("TileUnpackTime", ckgy.MAP);
        aM = new ckgz("BlueDotDirectionSourceCount", ckgy.MAP);
        aN = new ckgz("CompassAccuracyCount", ckgy.MAP);
        aO = new ckgz("TilesNotFoundInMemoryCache", ckgy.MAP);
        aP = new ckgz("TilesFetchedFromMemoryCacheNoUpdateRequired", ckgy.MAP);
        aQ = new ckgz("TilesPrefetchedPerTileExpired", ckgy.MAP);
        aR = new ckgz("TilesNotFoundInDiskCache", ckgy.MAP);
        aS = new ckgz("TilesFetchedEmptyTilesFromCache", ckgy.MAP);
        aT = new ckgz("TilesFetchedFromDiskCacheNoUpdateRequired", ckgy.MAP);
        aU = new ckgz("TilesPrefetchedNotFoundInDiskCache", ckgy.MAP);
        aV = new ckgz("TilesFetchedFromMemoryCache", ckgy.MAP);
        aW = new ckgz("TilesPrefetchedFromMemoryCache", ckgy.MAP);
        aX = new ckgz("TilesExpiredFromMemoryCache", ckgy.MAP);
        aY = new ckgz("TilesFetchedFromDiskCache", ckgy.MAP);
        aZ = new ckgz("TilesPrefetchedFromDiskCache", ckgy.MAP);
        ba = new ckgz("TilesFetchedFromCacheNeedUpdatePertile", ckgy.MAP);
        bb = new ckgz("TilesFetchedFromCacheNeedUpdateDataVersion", ckgy.MAP);
        bc = new ckgz("TilesFetchedFromCacheNeedUpdateLegalCountryOrLocale", ckgy.MAP);
        bd = new ckgz("TilesFetchedFromCacheNeedUpdateExperimentIds", ckgy.MAP);
        be = new ckgz("TilesFetchedFromServerCacheMiss", ckgy.MAP);
        bf = new ckgz("TilesFetchedFromServerAsUpdate", ckgy.MAP);
        new ckgz("TilesFetchedFromGmmServer", ckgy.MAP);
        bg = new ckgz("TilesFetchedFromPaint", ckgy.MAP);
        new ckha("TilesFetchedFromGmmServerSize", ckgy.MAP);
        bh = new ckha("TilesFetchedFromPaintSize", ckgy.MAP);
        new ckgz("TilesFetchedFromGmmServerUnchanged", ckgy.MAP);
        bi = new ckgz("TilesFetchedFromPaintUnchanged", ckgy.MAP);
        new ckha("TilesFetchedFromGmmServerUnchangedSize", ckgy.MAP);
        bj = new ckha("TilesFetchedFromPaintUnchangedSize", ckgy.MAP);
        new ckgz("TilesFetchedFromGmmServerUnchangedEpochMatch", ckgy.MAP);
        bk = new ckgz("TilesFetchedFromPaintUnchangedEpochMatch", ckgy.MAP);
        new ckha("TilesFetchedFromGmmServerUnchangedEpochMatchSize", ckgy.MAP, new cnkf(1));
        bl = new ckha("TilesFetchedFromPaintUnchangedEpochMatchSize", ckgy.MAP, new cnkf(1));
        new ckgz("TilesFetchedFromGmmServerUnchangedSameDataHash", ckgy.MAP);
        bm = new ckgz("TilesFetchedFromPaintUnchangedSameDataHash", ckgy.MAP);
        new ckha("TilesFetchedFromGmmServerUnchangedSameDataHashSize", ckgy.MAP, new cnkf(1));
        bn = new ckha("TilesFetchedFromPaintUnchangedSameDataHashSize", ckgy.MAP, new cnkf(1));
        bo = new ckgz("TilesFetchedFromPaintUnchangedSameDataHashEpochBypassed", ckgy.MAP);
        bp = new ckha("TilesFetchedFromPaintUnchangedSameDataHashEpochBypassedSize", ckgy.MAP, new cnkf(1));
        bq = new ckgz("TilesFetchedFromPaintStatusOkEmpty", ckgy.MAP);
        br = new ckgz("TilesFetchedFromPaintStatusNotFound", ckgy.MAP);
        bs = new ckgz("TilesFetchedFromPaintStatusBadRequest", ckgy.MAP);
        bt = new ckgz("TilesFetchedFromPaintStatusServerError", ckgy.MAP);
        bu = new ckgz("TilesPrefetched", ckgy.MAP);
        new ckgz("TilesWithValidPertileEpoch", ckgy.MAP);
        new ckgz("TilesWithPertileExpirationUpdated", ckgy.MAP);
        new ckgz("TilesNotFound", ckgy.MAP);
        bv = new ckgz("TileNotInDiskCache", ckgy.MAP);
        bw = new ckgz("TileUnpackingFailedIoError", ckgy.MAP);
        bx = new ckgz("TileUnpackingFailedMissingStyleTables", ckgy.MAP);
        by = new ckgz("TileUnpackingFailedParseFailure", ckgy.MAP);
        bz = new ckgz("TileUnpackingFailedUnsupportedFormat", ckgy.MAP);
        bA = new ckgz("TileUnpackingStyleTableMismatch", ckgy.MAP);
        bB = new ckha("MapsStartupMissingTilesFullViewport", ckgy.MAP);
        bC = new ckha("MapsStartupMissingTilesAllLabelsPlaced", ckgy.MAP);
        bD = new ckgz("MapsViewportNotLoggedMapViewNotCreated", ckgy.MAP);
        bE = new ckgz("MapsViewportNotLoggedCameraInAnimation", ckgy.MAP);
        bF = new ckgz("MapsViewportNotLoggedTilesNotLoaded", ckgy.MAP);
        bG = new ckgz("MapsViewportNotLoggedLabellingUnfinished", ckgy.MAP);
        bH = new ckgz("MapsViewportSuccessfullyLogged", ckgy.MAP);
        bI = new ckgz("TileStoreBaseTileSource", ckgy.MAP);
    }

    private ckgh() {
    }
}
